// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/lib/js/src/jest.js");
var Option = require("../src/Option.js");

Jest.test("isSome returns true with Some", (function () {
        return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](Option.isSome(/* Some */[/* A */0])));
      }));

Jest.test("isSome returns false with None", (function () {
        return Jest.Expect[/* toBe */2](/* false */0, Jest.Expect[/* expect */0](Option.isSome(/* None */0)));
      }));

Jest.test("isNone returns true with None", (function () {
        return Jest.Expect[/* toBe */2](/* true */1, Jest.Expect[/* expect */0](Option.isNone(/* None */0)));
      }));

Jest.test("isNone returns false with Some", (function () {
        return Jest.Expect[/* toBe */2](/* false */0, Jest.Expect[/* expect */0](Option.isNone(/* Some */[/* A */0])));
      }));

Jest.test("unwrap moves the value out of Some", (function () {
        return Jest.Expect[/* toEqual */12](/* A */0, Jest.Expect[/* expect */0](Option.unwrap(/* Some */[/* A */0])));
      }));

Jest.test("unwrap fails with None", (function () {
        return Jest.Expect[/* toThrowException */20](Option.UnexpectedNone, Jest.Expect[/* expect */0]((function () {
                          return Option.unwrap(/* None */0);
                        })));
      }));

Jest.test("expect fails with None and raises message", (function () {
        return Jest.Expect[/* toThrowException */20]([
                    Option.ExpectedSome,
                    "uh oh!"
                  ], Jest.Expect[/* expect */0]((function () {
                          return Option.expect(/* None */0, "uh oh!");
                        })));
      }));

Jest.test("unwrapOr returns a default value if option is None", (function () {
        return Jest.Expect[/* toEqual */12](/* B */1, Jest.Expect[/* expect */0](Option.unwrapOr(/* None */0, /* B */1)));
      }));

Jest.test("unwrapOr moves the value out of Some", (function () {
        return Jest.Expect[/* toEqual */12](/* A */0, Jest.Expect[/* expect */0](Option.unwrapOr(/* Some */[/* A */0], /* B */1)));
      }));

Jest.test("unwrapOrElse moves the value out of Some", (function () {
        return Jest.Expect[/* toEqual */12](/* A */0, Jest.Expect[/* expect */0](Option.unwrapOrElse(/* Some */[/* A */0], (function () {
                              return /* B */1;
                            }))));
      }));

Jest.test("unwrapOrElse invokes a function and returns its value if None", (function () {
        return Jest.Expect[/* toEqual */12](/* B */1, Jest.Expect[/* expect */0](Option.unwrapOrElse(/* None */0, (function () {
                              return /* B */1;
                            }))));
      }));

Jest.test("map applies function to Some value", (function () {
        return Jest.Expect[/* toEqual */12](/* Some */[/* B */1], Jest.Expect[/* expect */0](Option.map(/* Some */[/* A */0], (function () {
                              return /* B */1;
                            }))));
      }));

Jest.test("map returns None for None", (function () {
        return Jest.Expect[/* toEqual */12](/* None */0, Jest.Expect[/* expect */0](Option.map(/* None */0, (function () {
                              return /* B */1;
                            }))));
      }));

Jest.test("mapOr returns default for None", (function () {
        return Jest.Expect[/* toEqual */12](/* Some */[/* A */0], Jest.Expect[/* expect */0](Option.mapOr(/* None */0, /* A */0, (function () {
                              return /* B */1;
                            }))));
      }));

Jest.test("mapOr applies function to Some value", (function () {
        return Jest.Expect[/* toEqual */12](/* Some */[/* B */1], Jest.Expect[/* expect */0](Option.mapOr(/* Some */[/* A */0], /* A */0, (function () {
                              return /* B */1;
                            }))));
      }));

Jest.test("mapOrElse applies function to Some value", (function () {
        return Jest.Expect[/* toEqual */12](/* Some */[/* B */1], Jest.Expect[/* expect */0](Option.mapOrElse(/* Some */[/* A */0], (function () {
                              return /* C */2;
                            }), (function () {
                              return /* B */1;
                            }))));
      }));

Jest.test("mapOrElse returns result of function application", (function () {
        return Jest.Expect[/* toEqual */12](/* Some */[/* C */2], Jest.Expect[/* expect */0](Option.mapOrElse(/* None */0, (function () {
                              return /* C */2;
                            }), (function () {
                              return /* B */1;
                            }))));
      }));

/*  Not a pure module */
