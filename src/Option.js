// Generated by BUCKLESCRIPT VERSION 2.2.2, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var UnexpectedNone = Caml_exceptions.create("Option-BsOption.UnexpectedNone");

var ExpectedSome = Caml_exceptions.create("Option-BsOption.ExpectedSome");

function isSome(param) {
  if (param) {
    return /* true */1;
  } else {
    return /* false */0;
  }
}

function isNone(param) {
  if (param) {
    return /* false */0;
  } else {
    return /* true */1;
  }
}

function unwrap(param) {
  if (param) {
    return param[0];
  } else {
    throw UnexpectedNone;
  }
}

function expect(opt, message) {
  if (isNone(opt)) {
    throw [
          ExpectedSome,
          message
        ];
  }
  return unwrap(opt);
}

function unwrapOr(opt, $$default) {
  if (opt) {
    return opt[0];
  } else {
    return $$default;
  }
}

function unwrapOrElse(opt, f) {
  if (opt) {
    return opt[0];
  } else {
    return Curry._1(f, /* () */0);
  }
}

function map(opt, f) {
  if (opt) {
    return /* Some */[Curry._1(f, opt[0])];
  } else {
    return /* None */0;
  }
}

function mapOr(opt, $$default, f) {
  if (opt) {
    return /* Some */[Curry._1(f, opt[0])];
  } else {
    return /* Some */[$$default];
  }
}

function mapOrElse(opt, f, mapf) {
  if (opt) {
    return /* Some */[Curry._1(mapf, opt[0])];
  } else {
    return /* Some */[Curry._1(f, /* () */0)];
  }
}

exports.UnexpectedNone = UnexpectedNone;
exports.ExpectedSome = ExpectedSome;
exports.isSome = isSome;
exports.isNone = isNone;
exports.unwrap = unwrap;
exports.expect = expect;
exports.unwrapOr = unwrapOr;
exports.unwrapOrElse = unwrapOrElse;
exports.map = map;
exports.mapOr = mapOr;
exports.mapOrElse = mapOrElse;
/* No side effect */
